import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:sizer/sizer.dart';

import '../../core/app_export.dart';
import './widgets/action_buttons.dart';
import './widgets/fertilizer_card.dart';
import './widgets/irrigation_result_card.dart';
import './widgets/result_context_menu.dart';
import './widgets/water_quantity_card.dart';

class PredictionResults extends StatefulWidget {
  const PredictionResults({Key? key}) : super(key: key);

  @override
  State<PredictionResults> createState() => _PredictionResultsState();
}

class _PredictionResultsState extends State<PredictionResults>
    with TickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;

  bool _isLoading = false;
  OverlayEntry? _contextMenuOverlay;

  // Mock prediction results data
  final Map<String, dynamic> predictionData = {
    "timestamp": "2025-07-31 15:55:52",
    "irrigation": {
      "recommended": true,
      "confidence": 87.5,
      "timing": "Morning"
    },
    "water": {"amount": 45.2, "confidence": 92.3, "timing": "6:00 AM"},
    "fertilizer": {
      "amount": 12.8,
      "confidence": 89.1,
      "timing": "Evening",
      "npk": {"nitrogen": 15.2, "phosphorus": 8.7, "potassium": 12.3}
    }
  };

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _startCardAnimations();
  }

  void _initializeAnimations() {
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: const Interval(0.0, 0.6, curve: Curves.easeOut),
    ));

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: const Interval(0.2, 1.0, curve: Curves.easeOutCubic),
    ));
  }

  void _startCardAnimations() {
    Future.delayed(const Duration(milliseconds: 300), () {
      if (mounted) {
        _animationController.forward();
      }
    });
  }

  @override
  void dispose() {
    _animationController.dispose();
    _contextMenuOverlay?.remove();
    super.dispose();
  }

  Future<void> _handleRefresh() async {
    setState(() {
      _isLoading = true;
    });

    // Simulate rerunning prediction
    await Future.delayed(const Duration(seconds: 2));

    if (mounted) {
      setState(() {
        _isLoading = false;
      });

      // Restart animations
      _animationController.reset();
      _startCardAnimations();

      _showToast('Prediction updated successfully');
    }
  }

  void _handleSaveToHistory() {
    // Simulate saving to history
    _showToast('Prediction saved to history');
    HapticFeedback.lightImpact();
  }

  void _handleNewPrediction() {
    Navigator.pushReplacementNamed(context, '/sensor-data-input');
  }

  void _handleShareResults() {
    final irrigationStatus = (predictionData["irrigation"]
        as Map<String, dynamic>)["recommended"] as bool;
    final waterAmount =
        (predictionData["water"] as Map<String, dynamic>)["amount"] as double;
    final fertilizerAmount = (predictionData["fertilizer"]
        as Map<String, dynamic>)["amount"] as double;

    final shareText = '''
AgroPredict Results - ${predictionData["timestamp"]}

ðŸŒ± Irrigation: ${irrigationStatus ? "Recommended" : "Not Needed"}
ðŸ’§ Water: ${waterAmount.toStringAsFixed(1)} Liters
ðŸŒ¿ Fertilizer: ${fertilizerAmount.toStringAsFixed(1)} Liters

Generated by AgroPredict ML Models
    ''';

    Clipboard.setData(ClipboardData(text: shareText));
    _showToast('Results copied to clipboard');
  }

  void _showContextMenu(BuildContext context, Offset position) {
    _contextMenuOverlay?.remove();

    _contextMenuOverlay = OverlayEntry(
      builder: (context) => Positioned(
        left: position.dx - 40.w,
        top: position.dy - 20.h,
        child: Material(
          color: Colors.transparent,
          child: GestureDetector(
            onTap: _hideContextMenu,
            child: Container(
              width: 100.w,
              height: 100.h,
              color: Colors.transparent,
              child: Stack(
                children: [
                  Positioned(
                    left: 40.w,
                    top: 20.h,
                    child: SizedBox(
                      width: 50.w,
                      child: ResultContextMenu(
                        onShareResult: () {
                          _hideContextMenu();
                          _handleShareResults();
                        },
                        onViewModelDetails: () {
                          _hideContextMenu();
                          _showModelDetailsDialog();
                        },
                        onSetReminder: () {
                          _hideContextMenu();
                          _showReminderDialog();
                        },
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );

    Overlay.of(context).insert(_contextMenuOverlay!);
  }

  void _hideContextMenu() {
    _contextMenuOverlay?.remove();
    _contextMenuOverlay = null;
  }

  void _showModelDetailsDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(
          'Model Details',
          style: AppTheme.lightTheme.textTheme.titleLarge,
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'TensorFlow Lite Models',
              style: AppTheme.lightTheme.textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            SizedBox(height: 1.h),
            Text(
              'â€¢ Irrigation Model: Binary Classification\nâ€¢ Water Model: Regression Analysis\nâ€¢ Fertilizer Model: Multi-output Regression\nâ€¢ Training Data: 50,000+ samples\nâ€¢ Accuracy: 89.2% average',
              style: AppTheme.lightTheme.textTheme.bodyMedium,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  void _showReminderDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(
          'Set Reminder',
          style: AppTheme.lightTheme.textTheme.titleLarge,
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: CustomIconWidget(
                iconName: 'schedule',
                color: AppTheme.lightTheme.colorScheme.primary,
                size: 5.w,
              ),
              title: const Text('Tomorrow Morning'),
              onTap: () {
                Navigator.pop(context);
                _showToast('Reminder set for tomorrow morning');
              },
            ),
            ListTile(
              leading: CustomIconWidget(
                iconName: 'event',
                color: AppTheme.lightTheme.colorScheme.primary,
                size: 5.w,
              ),
              title: const Text('In 3 Days'),
              onTap: () {
                Navigator.pop(context);
                _showToast('Reminder set for 3 days');
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }

  void _showToast(String message) {
    Fluttertoast.showToast(
      msg: message,
      toastLength: Toast.LENGTH_SHORT,
      gravity: ToastGravity.BOTTOM,
      backgroundColor: AppTheme.lightTheme.colorScheme.primary,
      textColor: AppTheme.lightTheme.colorScheme.onPrimary,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.lightTheme.scaffoldBackgroundColor,
      appBar: AppBar(
        backgroundColor: AppTheme.lightTheme.colorScheme.primary,
        foregroundColor: AppTheme.lightTheme.colorScheme.onPrimary,
        title: Text(
          'Prediction Results',
          style: AppTheme.lightTheme.appBarTheme.titleTextStyle,
        ),
        centerTitle: true,
        actions: [
          IconButton(
            onPressed: _handleShareResults,
            icon: CustomIconWidget(
              iconName: 'share',
              color: AppTheme.lightTheme.colorScheme.onPrimary,
              size: 6.w,
            ),
          ),
        ],
      ),
      body: _isLoading
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(
                    color: AppTheme.lightTheme.colorScheme.primary,
                  ),
                  SizedBox(height: 2.h),
                  Text(
                    'Updating predictions...',
                    style: AppTheme.lightTheme.textTheme.bodyLarge,
                  ),
                ],
              ),
            )
          : RefreshIndicator(
              onRefresh: () => _handleRefresh(),
              color: AppTheme.lightTheme.colorScheme.primary,
              child: SingleChildScrollView(
                physics: const AlwaysScrollableScrollPhysics(),
                child: AnimatedBuilder(
                  animation: _animationController,
                  builder: (context, child) {
                    return FadeTransition(
                      opacity: _fadeAnimation,
                      child: SlideTransition(
                        position: _slideAnimation,
                        child: Column(
                          children: [
                            // Timestamp header
                            Container(
                              width: double.infinity,
                              margin: EdgeInsets.all(4.w),
                              padding: EdgeInsets.symmetric(
                                horizontal: 4.w,
                                vertical: 2.h,
                              ),
                              decoration: BoxDecoration(
                                color: AppTheme.lightTheme.colorScheme.primary
                                    .withValues(alpha: 0.1),
                                borderRadius: BorderRadius.circular(12),
                                border: Border.all(
                                  color: AppTheme.lightTheme.colorScheme.primary
                                      .withValues(alpha: 0.3),
                                  width: 1,
                                ),
                              ),
                              child: Row(
                                children: [
                                  CustomIconWidget(
                                    iconName: 'access_time',
                                    color:
                                        AppTheme.lightTheme.colorScheme.primary,
                                    size: 5.w,
                                  ),
                                  SizedBox(width: 2.w),
                                  Text(
                                    'Analysis completed: ${predictionData["timestamp"]}',
                                    style: AppTheme
                                        .lightTheme.textTheme.bodyMedium
                                        ?.copyWith(
                                      fontWeight: FontWeight.w500,
                                      color: AppTheme
                                          .lightTheme.colorScheme.primary,
                                    ),
                                  ),
                                ],
                              ),
                            ),

                            // Irrigation Result Card
                            GestureDetector(
                              onLongPress: () {
                                HapticFeedback.mediumImpact();
                                final RenderBox renderBox =
                                    context.findRenderObject() as RenderBox;
                                final position =
                                    renderBox.localToGlobal(Offset.zero);
                                _showContextMenu(context, position);
                              },
                              child: IrrigationResultCard(
                                isRecommended: (predictionData["irrigation"]
                                        as Map<String, dynamic>)["recommended"]
                                    as bool,
                                confidence: (predictionData["irrigation"]
                                        as Map<String, dynamic>)["confidence"]
                                    as double,
                                timing: (predictionData["irrigation"]
                                        as Map<String, dynamic>)["timing"]
                                    as String,
                              ),
                            ),

                            // Water Quantity Card
                            GestureDetector(
                              onLongPress: () {
                                HapticFeedback.mediumImpact();
                                final RenderBox renderBox =
                                    context.findRenderObject() as RenderBox;
                                final position =
                                    renderBox.localToGlobal(Offset.zero);
                                _showContextMenu(context, position);
                              },
                              child: WaterQuantityCard(
                                waterAmount: (predictionData["water"]
                                        as Map<String, dynamic>)["amount"]
                                    as double,
                                confidence: (predictionData["water"]
                                        as Map<String, dynamic>)["confidence"]
                                    as double,
                                timing: (predictionData["water"]
                                        as Map<String, dynamic>)["timing"]
                                    as String,
                              ),
                            ),

                            // Fertilizer Card
                            GestureDetector(
                              onLongPress: () {
                                HapticFeedback.mediumImpact();
                                final RenderBox renderBox =
                                    context.findRenderObject() as RenderBox;
                                final position =
                                    renderBox.localToGlobal(Offset.zero);
                                _showContextMenu(context, position);
                              },
                              child: FertilizerCard(
                                fertilizerAmount: (predictionData["fertilizer"]
                                        as Map<String, dynamic>)["amount"]
                                    as double,
                                confidence: (predictionData["fertilizer"]
                                        as Map<String, dynamic>)["confidence"]
                                    as double,
                                timing: (predictionData["fertilizer"]
                                        as Map<String, dynamic>)["timing"]
                                    as String,
                                npkBreakdown: Map<String, double>.from(
                                    (predictionData["fertilizer"]
                                            as Map<String, dynamic>)["npk"]
                                        as Map<String, dynamic>),
                              ),
                            ),

                            SizedBox(height: 2.h),

                            // Action Buttons
                            ActionButtons(
                              onSaveToHistory: _handleSaveToHistory,
                              onNewPrediction: _handleNewPrediction,
                            ),

                            SizedBox(height: 4.h),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
    );
  }
}
